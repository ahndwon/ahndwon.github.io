<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml"/><link href="http://localhost:4000/" rel="alternate" type="text/html"/><updated>2018-05-29T18:55:20+09:00</updated><id>http://localhost:4000/</id><title type="html">Your awesome title</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">1장 - 코틀린 소개</title><link href="http://localhost:4000/2017/05/29/chapter1/" rel="alternate" type="text/html" title="1장 - 코틀린 소개"/><published>2017-05-30T03:49:05+09:00</published><updated>2017-05-30T03:49:05+09:00</updated><id>http://localhost:4000/2017/05/29/chapter1</id><content type="html" xml:base="http://localhost:4000/2017/05/29/chapter1/">&lt;h1 id=&quot;1장---코틀린-소개&quot;&gt;1장 - 코틀린 소개&lt;/h1&gt; &lt;h2 id=&quot;코틀린이란-무엇인가&quot;&gt;코틀린이란 무엇인가?&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;자바 플랫폼에서 돌아가는 새로운 프로그래밍 언어&lt;/li&gt; &lt;li&gt;자바 코드와의 상호운용성(interoperability)를 중시한다.&lt;/li&gt; &lt;li&gt;기존 자바 라이브러리나 프레임워크와 함께 잘 작동하며 성능도 자바와 같은 수준&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;11-코틀린-맛보기&quot;&gt;1.1 코틀린 맛보기&lt;/h2&gt; &lt;p&gt;http://try.kotl.in&lt;/p&gt; &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;age:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;args:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;persons&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;listOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;영희&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;철수&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;29&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oldest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;maxBy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;나이가 가장 많은 사람: $oldest&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;&lt;strong&gt;?: 연산자&lt;/strong&gt; ?: 연산자 (엘비스 연산자) - 변수 값이 null인 경우 0을 반환하고 그렇지 않은 경우 변수의 값을 반환함&lt;/p&gt; &lt;h2 id=&quot;12-코틀린의-주요-특성&quot;&gt;1.2 코틀린의 주요 특성&lt;/h2&gt; &lt;h3 id=&quot;121-대상-플랫폼--서버-안드로이드-등-자바가-실행되는-모든-곳&quot;&gt;1.2.1 대상 플랫폼 : 서버, 안드로이드 등 자바가 실행되는 모든 곳&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;코틀린을 활용할 수 있는 일반적인 영역&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;서버상의 코드 ( 웹 애플리케이션 백엔드 )&lt;/li&gt; &lt;li&gt;안드로이드 기반의 모바일 애플리케이션&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;인텔의 멀티 OS 엔진을 사용하면 iOS 디바이스에서도 코틀린 사용 가능 자바스크립트로도 코틀린 컴파일 가능&lt;/p&gt; &lt;p&gt;-&amp;gt; 다양한 환경에서 활용 가능&lt;/p&gt; &lt;h3 id=&quot;정적-타입-지정-언어&quot;&gt;정적 타입 지정 언어&lt;/h3&gt; &lt;p&gt;자바와 마찬가지로 코틀린은 정적타입 (statically typed) 지정 언어다.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;statically typed&lt;/strong&gt; ( 정적 타입 ) -&amp;gt; 모든 프로그램 구성 요소의 타입을 컴파일 시점에 알 수 있고 프로그램 안에서 객체의 필드나 메소드를 사용할 때마다 컴파일러 타입을 검증해준다는 뜻&lt;/li&gt; &lt;li&gt;&lt;strong&gt;dynamically typed&lt;/strong&gt; (동적 타입) -&amp;gt; Groovy, JRuby, Javascript, Python 가 대표적 언어, &lt;ul&gt; &lt;li&gt;장점 : 타입과 관계없이 모든 값을 변수에 넣을 수 있고, 메소드나 필드 접근에 대한 검증이 실행 시점에 일어나며, 그에 따른 코드가 더 짧아지고 데이터 구조를 더 유연하게 생성하고 사용할 수 있다.&lt;/li&gt; &lt;li&gt;단점 : 이름을 잘못 입력하는 등의 실수도 컴파일 시 걸러내지 못하고 실행 시점(Runtime)에 오류가 발생함&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;코틀린은 정적타입 언어지만 타입을 추론 할 수 있다.&lt;/p&gt; &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 타입을 명시&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 컴파일러가 타입을 추론함&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;&lt;strong&gt;정적 타입 지정의 장점&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;성능 - 실행 시점에 어떤 메소드를 호출할지 알아내는 과정이 필요 없으므로 메소도 호출이 빠름&lt;/li&gt; &lt;li&gt;신뢰성 - 컴파일러가 프로그램의 정확성을 검증하기 때문에 실행 시 프로그램이 오류로 중단될 가능성이 적어짐&lt;/li&gt; &lt;li&gt;유지 보수성 - 코드에서 다루는 객체가 어떤 티입에 속하는지 알 수 있기 때문에 처음 보는 코드를 다룰 때도 더 쉽다.&lt;/li&gt; &lt;li&gt;도구 지원 - 정적 타입 지정을 활용하면 더 안전하게 리팩토링 할 수 있고 도구는 더 정확한 코드 완성 기능을 제공할 수 있으며, IDE의 다른 지원 기능도 더 잘 만들 수 있다.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;코틀린 특징&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;코틀린은 nullable type을 지원 -&amp;gt; 널 포인터 예외 발생 여부를 체크하기 때문에 프로그램 신뢰성 향상&lt;/li&gt; &lt;li&gt;코틀린은 함수형 프로그래밍 언어이다.&lt;/li&gt; &lt;/ul&gt; &lt;h3 id=&quot;함수형-프로그래밍과-객체지향-프로그래밍&quot;&gt;함수형 프로그래밍과 객체지향 프로그래밍&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;함수형 프로그래밍의 핵심 개념&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;일급 시민(first class)인 함수 - 함수를 일반 값처럼 다룰 수 있다. 함수를 변수에 저장할 수 있고, 함수를 인자로 다른 함수에 전달 할 수 있으며, 함수에서 새로운 함수를 만들어서 반환할 수 있다.&lt;/li&gt; &lt;li&gt;불변성(immutability) - 함수형 프로그래밍에서는 일단 만들어지고 나면 내부 상태가 절대로 바뀌지 않는 불변 객체를 사용해 프로그램을 작성한다.&lt;/li&gt; &lt;li&gt;부수 효과(side effect) 없음 - 입력이 같으면 항상 같은 출력을 내놓고 다른 객체의 상태를 변경하지 않으며, 함수 외부나 다른 바깥 환경과 상호작용하지 않는 순수 함수를 사용&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;자바에서도 함수형 프로그래밍이 가능하긴 함 (람다)&lt;/p&gt; &lt;h2 id=&quot;13-코틀린-응용&quot;&gt;1.3 코틀린 응용&lt;/h2&gt; &lt;h3 id=&quot;131-코틀린-서버-프로그래밍&quot;&gt;1.3.1 코틀린 서버 프로그래밍&lt;/h3&gt; &lt;p&gt;서버 프로그래밍의 분야&lt;/p&gt; &lt;ul&gt; &lt;li&gt;브라우저에 HTML 페이지를 돌려주는 웹 애플리케이션&lt;/li&gt; &lt;li&gt;모바일 애플리케이션에게 HTTP를 통해 JSON API를 제공하는 백엔드 애플리케이션&lt;/li&gt; &lt;li&gt;RPC(Remote Procedure Call) 프로토콜을 통해 서로 통신하는 작은 서비스들로 이뤄진 마이크로서비스&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;원격 프로시저 호출(영어: remote procedure call, 리모트 프로시저 콜, RPC)은 별도의 원격 제어를 위한 코딩 없이 다른 주소 공간에서 함수나 프로시저를 실행할 수 있게하는 프로세스 간 통신 기술 다시 말해, 원격 프로시저 호출을 이용하면 프로그래머는 함수가 실행 프로그램에 로컬 위치에 있든 원격 위치에 있든 동일한 코드를 이용할 수 있다.&lt;/p&gt; &lt;h3 id=&quot;132-코틀린-안드로이드-프로그래밍&quot;&gt;1.3.2 코틀린 안드로이드 프로그래밍&lt;/h3&gt; &lt;p&gt;코틀린을 통해 보일러플레이트 제거 가능 Anko 라이브러리를 사용하면 수많은 안드로이드 API에 대한 코틀린 어댑터를 제공받을 수 있다. DSL - Domain Specific Language&lt;/p&gt; &lt;p&gt;Anko Layout 예 [image:70F5A7EC-8886-4F79-BAD1-41F227DD5D1B-688-0000034BAE35B6F0/5D88292B-11F7-4D93-8361-233F75E52507.png]&lt;/p&gt; &lt;p&gt;Kotlin Android Extensions 활용 빌드 그래들에 아래 플러그인 추가 &lt;code class=&quot;highlighter-rouge&quot;&gt;apply plugin: 'kotlin-android-extensions'&lt;/code&gt; [image:29CF0315-BEE9-4F15-A214-547FB90A2E0F-688-00000354A86DE1CB/77C718D3-A2D7-4F6D-A08A-2BB66546BBD6.png] &amp;lt; 사용 전 &amp;gt;&lt;/p&gt; &lt;p&gt;[image:6B30678C-496F-46E3-ACD2-8F40C5F82D46-688-000003661AC461C1/E4A33AB6-C28B-463D-A716-8DC5697FFA2E.png] &amp;lt; 사용 후 &amp;gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;안드로이도 개발에 코틀린 사용시 장점&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Null Pointer Exception 방지 가능&lt;/li&gt; &lt;li&gt;자바 6와 완전 호환되어 호환성 문제가 발생하지 않는다.&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;코틀린의-철학&quot;&gt;코틀린의 철학&lt;/h2&gt; &lt;h3 id=&quot;141-실용성&quot;&gt;1.4.1 실용성&lt;/h3&gt; &lt;p&gt;코틀린은 학문 연구로서의 사용보단 실제 업무에 더 적합하다. 이미 다른 프로그래 언어가 채택한 검증된 해법과 기능에 의존하므로 안전하고 배우기 더 쉽다.&lt;/p&gt; &lt;h3 id=&quot;142-간결성&quot;&gt;1.4.2 간결성&lt;/h3&gt; &lt;p&gt;코틀린은 코드를 간결하게 작성하게 해줘서 의도롤 쉽게 파알 할 수 있고 보일러플레이트가 적다. 게터, 세터, 생성자 묵시적으로 제공하기 때문에 코드가 간결함.&lt;/p&gt; &lt;h3 id=&quot;143-안전성&quot;&gt;1.4.3 안전성&lt;/h3&gt; &lt;p&gt;안전성 -&amp;gt; 프로그램에서 발생 할 수 있는 오류 중에서 일부 유형의 오류를 프로그램 설계가 원천적으로 방지&lt;/p&gt; &lt;p&gt;안전성과 생산성 사이에는 trade-off 관계 성립&lt;/p&gt; &lt;p&gt;코틀린은 nullable로 NullPointer Exception 안전성 보장&lt;/p&gt; &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;s:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// null 가능&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;s2:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// null 불가능&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;ClassCastException에 대해서도 타입 검사 가능&lt;/p&gt; &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 타입 검사&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 해당 타입의 메소드 사용&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h3 id=&quot;144-상호운용성&quot;&gt;1.4.4 상호운용성&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;자바와 코틀린은 자유롭게 오갈 수 있다&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;자바와 코틀린 소스 파일 자유롭게 내비게이션 가능&lt;/li&gt; &lt;li&gt;여러 언어로 이뤄진 프로젝트를 디버깅하고 서로 다른 언어로 작성된 코드를 언어와 관계없이 한 단계씩 실행할 수 있다.&lt;/li&gt; &lt;li&gt;자바 메소드를 리팩토링해도 그 메소드와 관련 있는 코틀린 코드까지 제대로 변경된다. 역으로 코틀린 메소도 리팩토링해도 자바 코드까지 모두 자동으로 변경됨&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;15-코틀린-도구-사용&quot;&gt;1.5 코틀린 도구 사용&lt;/h2&gt; &lt;h3 id=&quot;151-코틀린-코드-컴파일&quot;&gt;1.5.1 코틀린 코드 컴파일&lt;/h3&gt; &lt;p&gt;[image:5EB26403-4AF8-48EA-AA32-689F11ED8E97-688-0000094A8E3B3AF5/E2DAA9D3-445F-4247-B380-43FFDF544824.png]&lt;/p&gt; &lt;p&gt;코틀린 컴파일러로 컴파일한 코드는 코틀린 런타임 라이브러리에 의존한다. 코틀린은 메이븐, 그레이들, 앤트 등의 빌드 시스템이랑도 호환됨.&lt;/p&gt; &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// $ kotlinc Hello.kt &lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// =&amp;gt; HelloKt.class &lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// $ javap -c HelloKt.class&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// $ kotlin HelloKt&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// $ java HelloKt&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* Exception in thread &quot;main&quot; java.lang.NoClassDefFoundError: kotlin/jvm/internal/Intrinsics at HelloKt.main(Hello.kt) Caused by: java.lang.ClassNotFoundException: kotlin.jvm.internal.Intrinsics at java.net.URLClassLoader.findClass(URLClassLoader.java:381) at java.lang.ClassLoader.loadClass(ClassLoader.java:424) at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:338) at java.lang.ClassLoader.loadClass(ClassLoader.java:357) ... 1 more */&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 코틀린의 새로운 기능에 대한 부분이 포함되어야 한다.&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// $ kotlin &amp;lt;- kotlin의 기능이 포함된 클래스가 로드된다. - 500KB&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// $ java &amp;lt;- kotlin의 기능이 로드되지 않는다.&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// $ kotlinc -include-runtime Hello.kt -d Hello.jar&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// $ java -jar Hello.jar&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h3 id=&quot;153-대화형-쉘&quot;&gt;1.5.3 대화형 쉘&lt;/h3&gt; &lt;p&gt;REPL (read-eval-print loop) 사용법 : kotlinc 를 아무 인자 없이 실행하면 됨&lt;/p&gt; &lt;h2 id=&quot;요약&quot;&gt;요약&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;코틀린 -&amp;gt; 타입 추론을 지원하는 정적 타입 지정 언어&lt;/li&gt; &lt;li&gt;코틀린은 객체지향과 함수형 프로그래밍 스타일을 모두 지원&lt;/li&gt; &lt;li&gt;코틀린을 서버 애플리케이션 개발에 활용 가능&lt;/li&gt; &lt;li&gt;코틀린은 안드로이드에도 활용 가능&lt;/li&gt; &lt;li&gt;코틀린은 실용적이고 안전하며, 간결하고 상호운용성이 좋다. NullPointerException등 다양한 오류를 방지하고 코드를 간결하게 해주며 자바의 기존 라이브러리 모두 사용 가능하다.&lt;/li&gt; &lt;/ul&gt;</content><author><name></name></author><summary type="html">1장 - 코틀린 소개 코틀린이란 무엇인가? 자바 플랫폼에서 돌아가는 새로운 프로그래밍 언어 자바 코드와의 상호운용성(interoperability)를 중시한다. 기존 자바 라이브러리나 프레임워크와 함께 잘 작동하며 성능도 자바와 같은 수준</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/twoscreen.jpg"/></entry><entry><title type="html">Hello World!</title><link href="http://localhost:4000/2017/01/01/hello-world/" rel="alternate" type="text/html" title="Hello World!"/><published>2017-01-02T06:15:05+09:00</published><updated>2017-01-02T06:15:05+09:00</updated><id>http://localhost:4000/2017/01/01/hello-world</id><content type="html" xml:base="http://localhost:4000/2017/01/01/hello-world/">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt; &lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt; &lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt; &lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt; &lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/startup.jpg"/></entry></feed>